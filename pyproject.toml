[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "sqlitedb-map-tools"
version = "0.2.0"
description = "A set of CLI tools for working with .mbtiles map files, including a map downloader."
authors = ["ZUB3C <pitzubarev@yandex.ru>", "Zubarev Grigoriy <thirtysix@thirtysix.pw>"]
readme = "README.md"
license = "GPL-3.0-or-later"
keywords = [
    "mbtiles",
    "sqlitedb",
    "osmand",
    "locus",
    "GIS",
    "cli",
]
classifiers = [
    "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
    "Development Status :: 5 - Production/Stable",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "Intended Audience :: End Users/Desktop",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3 :: Only",
    "Topic :: Scientific/Engineering :: GIS",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Utilities",
    "Typing :: Typed",
]

[tool.poetry.dependencies]
python = "^3.10"
pillow = "^10.4.0"
tqdm = "^4.66.4"
requests = "^2.32.3"
click = "^8.1.7"
click-help-colors = "^0.9.4"

[tool.poetry.group.dev.dependencies]
ruff = "^0.5.2"
mypy = "^1.10.1"
types-tqdm = "^4.66.0.20240417"
types-requests = "^2.32.0.20240712"

[tool.poetry.scripts]
mbtiles2sqlitedb = "sqlitedb_map_tools:convert_mbtiles_to_sqlitedb"
sqlitedb-cut = "sqlitedb_map_tools:cut_sqlitedb_map"
sqlitedb-merge = "sqlitedb_map_tools:merge_sqlitedb_maps"
nakarteme-dl = "sqlitedb_map_tools:download_nakarteme_maps"

[tool.ruff]
target-version = "py310"
line-length = 99
exclude = [
    ".git",
    ".venv",
    ".idea",
    ".tests",
    ".cache",
    "build",
    "dist",
    "scripts",
]

[tool.ruff.lint]
select = [
    "E", # pycodestyle errors
    "W", # pycodestyle warnings
    "F", # pyflakes
    "I", # isort
    "N", # pep8-naming
    "S", # flake8-bandit
    "B", # flake8-bugbear
    "G", # flake8-logging-format
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "PD", # pandas-vet
    "PLC", # pylint conventions
    "PLE", # pylint errors
    "SIM", # flake8-simplify
    "RET", # flake8-return
    "YTT", # flake8-2020
    "DTZ", # flake8-datetimez
    "RUF", # ruff-specific rules
    "TCH", # flake8-type-checking
    "PTH", # flake8-use-pathlib
    "ASYNC", # flake8-async
]
ignore = [
    "PTH123", # `open()` should be replaced by `Path.open()`
    "PD901", # Avoid using the generic variable name df for DataFrames
    "RUF003", # Ambiguous unicode character comment
    "RUF001", # String contains ambiguous `Ð’` (CYRILLIC CAPITAL LETTER VE)
]

[tool.mypy]
strict = true
exclude = [
    ".git",
    ".venv",
    ".idea",
    ".tests",
    ".cache",
    "build",
    "dist",
    "scripts",
]
